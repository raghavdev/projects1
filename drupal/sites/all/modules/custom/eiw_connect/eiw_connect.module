<?php

/**
 * @file
 * Primarily Drupal hooks and global functions to support the Go Watch It API.
 */

/**
 * Implements hook_menu()
 */
function eiw_connect_menu() {

  $items = array();

  // Create an administration block for the module and any submodules.
  $items['admin/config/eiw'] = array(
    'title' => t('EIW Connect'),
    'description' => t('Configure the EIW data store integration.'),
    'position' => 'right',
    'weight' => 21,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('manage eiw connect'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Create the main settings page.
  $items['admin/config/eiw/settings'] = array(
    'title' => t('Integration Settings'),
    'description' => t('Configure the connection information and settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eiw_connect_form'),
    'access arguments' => array('manage eiw connect'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Create the main settings tab
  $items['admin/config/eiw/settings/config'] = array(
    'title' => t('Settings'),
    'description' => t('Configure the connection information and settings.'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  // Create the confirmation tab.
  $items['admin/config/eiw/settings/db_test'] = array(
    'title' => t('Connection Test Page'),
    'description' => t('Confirm that the database connection is successful.'),
    'page callback' => 'db_test_page',
    'access arguments' => array('manage eiw connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  return $items;
}

/**
 * Call the custom settings form.
 */
function eiw_connect_form() {
  return drupal_get_form('eiw_connect_settings_form');
}

/**
 * Settings form for configuration.
 */
function eiw_connect_settings_form() {

  $form['mssql_host'] = array(
    '#type' => 'textfield',
    '#title' => t('MS SQL Host IP'),
    '#description' => t('The IP address of the MS SQL Server instance.'),
    '#default_value' => variable_get('mssql_host', ''),
    '#size' => 60,
    '#required' => TRUE,
  );

  $form['mssql_port'] = array(
    '#type' => 'textfield',
    '#title' => t('MS SQL Port'),
    '#description' => t('The port for the MS SQL Server instance.'),
    '#default_value' => variable_get('mssql_port', '1433'),
    '#size' => 10,
    '#required' => TRUE,
  );

  $form['mssql_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('MS SQL Domain'),
    '#description' => t('The domain for the MS SQL Server instance.'),
    '#default_value' => variable_get('mssql_domain', ''),
    '#size' => 40,
    '#required' => TRUE,
  );

  $form['mssql_user'] = array(
    '#type' => 'textfield',
    '#title' => t('MS SQL Username'),
    '#description' => t('The username for the MS SQL Server instance.'),
    '#default_value' => variable_get('mssql_user', ''),
    '#size' => 60,
    '#required' => TRUE,
  );

  $form['mssql_password'] = array(
    '#type' => 'password',
    '#title' => t('MS SQL Password'),
    '#description' => t('The password for the MS SQL Server instance.'),
    '#default_value' => '',
    '#size' => 60,
    '#required' => TRUE,
  );

  $form['mssql_schema'] = array(
    '#type' => 'textfield',
    '#title' => t('MS SQL Schema'),
    '#description' => t('The database schema to use when querying the MS SQL Server instance.'),
    '#default_value' => variable_get('mssql_schema', ''),
    '#size' => 60,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

/**
 * Validate the form.
 */
function eiw_connect_settings_form_validate($form, &$form_state) {
  // Validate the host IP.
  if (empty($form_state['input']['mssql_host']) || !(preg_match('/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/', $form_state['input']['mssql_host']))) {
    form_set_error('mssql_host', 'You must enter an IP address for the server instance ex: 10.0.0.1');
  }
  // Validate the host port.
  if (empty($form_state['input']['mssql_port']) || !(preg_match('/^\d{1,5}$/', $form_state['input']['mssql_port']))) {
    form_set_error('mssql_port', 'You must enter a port for the server instance ex: 42000');
  }
  // Validate the host domain.
  if (empty($form_state['input']['mssql_domain'])) {
    form_set_error('mssql_domain', 'You must enter a domain for the server instance');
  }
  // Validate the host username.
  if (empty($form_state['input']['mssql_user'])) {
    form_set_error('mssql_user', 'You must enter a username for the server instance');
  }
  // Validate the host password.
  if (empty($form_state['input']['mssql_password'])) {
    form_set_error('mssql_password', 'You must enter a password for the server instance');
  }
  // Validate the host password.
  if (empty($form_state['input']['mssql_schema'])) {
    form_set_error('mssql_schema', 'You must enter a schema for the server instance');
  }
}

/**
 * Handle the submission of the form and encrypt the data.
 */
function eiw_connect_settings_form_submit($form, &$form_state) {
  // Save the variable values.
  variable_set('mssql_host', $form_state['input']['mssql_host']);
  variable_set('mssql_port', $form_state['input']['mssql_port']);
  variable_set('mssql_domain', $form_state['input']['mssql_domain']);
  variable_set('mssql_user', $form_state['input']['mssql_user']);
  variable_set('mssql_password', encrypt($form_state['input']['mssql_password']));
  variable_set('mssql_schema', $form_state['input']['mssql_schema']);
}

/**
 * Page to test that the connection settings can successfully connect to the remote MS SQL instance.
 */
function db_test_page() {
  $db = new DatabaseConnection_mssql();

  $markup = '';

  if ($db->fetch_connection_error()) {
    $markup = $db->fetch_connection_error();
  }
  else {
    $markup .= '<h1>Connection Successful</h1>';
    $schemas = $db->select_query('SELECT name FROM master..sysdatabases');
    $tables = $db->select_query('SELECT name FROM sys.Tables');

    $markup .= '<div><h2>Available Schemas</h2><ul>';
    if (!empty($schemas)) {
      foreach($schemas as $schema) {
        $markup .= '<li><strong>' . $schema['name']  . '</strong></li>';
      }
    }
    $markup .= '</ul></div>';


    $markup .= '<div><h2>' . variable_get('mssql_schema')  .  ' Tables</h2><ul>';
    if (!empty($tables)) {
      foreach($tables as $table) {
        // Get the the count.
        $count = $db->select_query('SELECT COUNT(*) AS count FROM ' . $table['name']);
        $markup .= '<li><strong>' . $table['name']  . '</strong> : ( ' . $count[0]['count'] . ' rows )<ul>';
        $columns = $db->select_query('SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = "' . $table['name']  . '"');
        if (!empty($columns)) {
          foreach($columns as $column) {
            $markup .= '<li>' . $column['COLUMN_NAME'] . '</li>';
          }
        }
        $markup .= '</ul></li>';
      }
    }
    $markup .= '</ul></div>';
  }

  $page = array(
    '#markup' => $markup,
  );
  $output = drupal_render($page);

  return $output;
}

/**
 * Implements hook_permission()
 *
 * This provides a custom permissions level for using this module.
 */
function eiw_connect_permission() {
  return array(
    'manage eiw connect' => array(
      'title' => t('Manage EIW Connection'),
      'description' => t('Administer the integration between Drupal and the EIW data store.'),
      'restrict access' => TRUE,
    ),
  );
}
